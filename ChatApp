#!/usr/bin/env python3
import sys
import socket
import threading
import datetime
import ipaddress
import time
import uuid
import os

# Define the global server table
server_table = {}
# Define the global client table
client_table = {}
#keep track of send messages and their ACKs
message_acks = {}
#holds offline messages for each client
save_message = {}
#keep track of registration status of client
client_registration_status = False


#thread to handle received messages by server
def server_receiver(server_socket,message,client_address_port,client_ip_address,client_port):
    #boolean to broadcast the table
    broadcast = True

    #DEREGISTRATION
    if message.startswith("DEREG:"):
        #change client status to False
        dereg_client_id = message.split("DEREG:")[1]
        dereg_client = dereg_client_id.split(" ")[0]
        message_id = dereg_client_id.split(" ")[1]
        server_table[dereg_client] = [client_ip_address,client_port,False]
        server_socket.sendto(str.encode(f"[DEREG]:{message_id}"),client_address_port)
    #RE-REGISTRATION
    elif message.startswith("REG:"):
        reg_client = message.split("REG:")[1]
        server_table[reg_client] = [client_ip_address,client_port,True]
        #if have online message send, else don't
        if len(save_message[reg_client])>0:
            #ACK of reregistration
            server_socket.sendto(str.encode("REG: Offline Messages"),client_address_port)
            #loop through offline messages for re-registered client
            offline_messages = save_message[reg_client]
            for message in offline_messages:
                server_socket.sendto(str.encode("[OFFLINE]"+message),client_address_port)
            #clear the offline messages
            save_message[reg_client] = []
        else:
            #ACK of reregistration
            server_socket.sendto(str.encode("REG: No Offline Messages"),client_address_port)
    #SAVE-MESSSAGE
    elif message.startswith("SAVE:"):
        receiver = message.split(" ")[1]
        sender = message.split(" ")[2]
        timestamp = message.split(" ")[3] + " "+message.split(" ")[4]
        message_to_save = message.split(" ",5)[5]
        #REFORMAT THE MESSAGE: <name_sender>: <timestamp> <messsage>
        formatted_message = f"{sender}: <{timestamp}> {message_to_save}"

        #if the recipientâ€™s status is online in its table, the server should try to contact client
        if server_table[receiver][2]==True:
            # Create a new thread for checking to see if client is online
            active_thread = threading.Thread(target=send_online_confirmation, args=(receiver,client_address_port,server_socket,formatted_message,timestamp))
            # Start the thread
            active_thread.start()
        else:
            #if recipient client is not active, save message to memory
            #add entry into save-message table
            save_message[receiver].append(formatted_message) 
            #send ACK to sender client
            server_socket.sendto(str.encode(f"[OFFLINE ACK]:[Offline Message sent at <{timestamp}> received by the server and saved.]"),client_address_port)
        broadcast=False
    #ACK TO OFFLINE message
    elif message.startswith("[OFFLINE ACK]"):
        #send ACK to original sender of message
        #[OFFLINE ACK]:{sender} {datetime.datetime.now()} {self.name}
        message = message.split("[OFFLINE ACK]")[1]
        #remove Group Chat beginning
        if message.startswith("Group Chat"):
            message = message.split("Group Chat ")[1]
        #make sure that client isn't jusst re-registering and receiving a queued up delivery confirmation
        if not message.startswith("[OFF]"):
            sender = message.split(" ")[0]
            timestamp = message.split(" ")[1]+" "+message.split(" ")[2]
            receiver = message.split(" ")[3]
            sender_ip = server_table[sender][0]
            sender_port = server_table[sender][1]

            #if original sender is online
            if server_table[sender][2]==True:
                server_socket.sendto(str.encode(f"[OFFLINE CONFIRM][Offline Message sent at <{timestamp}> received by {receiver}.]"),(sender_ip,sender_port))
            #original sender is offline
            else:
                #save to sender's offline messages
                save_message[sender].append(f"[OFF][Offline Message sent at <{timestamp}> received by {receiver}.]") 
                
        broadcast = False
    #ONLINE ACK
    elif message.startswith("[ONLINE ACK]:"):
        message_id = message.split("[ONLINE ACK]:")[1]
        message_acks.pop(message_id, None)
        broadcast = False
    #GC ACK
    elif message.startswith("[GC ACK]"):
        message_id = message.split("[GC ACK]")[1]
        message_acks.pop(message_id,None)
        broadcast = False
    ##GROUP CHAT message
    elif message.startswith("GROUP:"):
        message = message.split("GROUP:")[1]
        message_id = message.split(" ")[0]
        message = message.split(" ")[1] + " " + message.split(" ",2)[2]
        #send ACK back to sender
        server_socket.sendto(str.encode(f"[GROUP ACK]{message_id}"), client_address_port)

        #get the name of the sender
        sender_name = ""
        for client in server_table:
            if server_table[client][0]==client_ip_address and server_table[client][1]==client_port:
                sender_name = client


        #loop through clients and send GC message
        for client in server_table:
            gc_client_ip = server_table[client][0]
            gc_client_port = server_table[client][1]
            if server_table[client][2]==True:
                #send gc message to active client
                if gc_client_port!=client_port or gc_client_ip!=client_ip_address:
                    ##ADD TIMEOUT and we need to confirm that ACK was received
                    active_user_message_id = str(uuid.uuid4())
                    message_acks[active_user_message_id] = False

                    #send messsage
                    server_socket.sendto(str.encode(f"Group Chat {active_user_message_id} "+ message), (gc_client_ip,gc_client_port))

                    #100 msec timeout
                    time.sleep(0.1)

                    #check if ACK was not received
                    if active_user_message_id in message_acks:
                        #inform sender that ack wasn't received
                        server_socket.sendto(str.encode(f"[NO ACK][No ACK from {client}, message sent to server.]"),client_address_port)
                        
                        #save message 
                        msg_save = message.split(": ")[1]
                        timestamp = datetime.datetime.now()
                        formatted_message = f"Group Chat {sender_name}: <{timestamp}> {msg_save}"
                        save_message[client].append(formatted_message) 

                        #send ACK to sender client
                        server_socket.sendto(str.encode(f"[OFFLINE ACK]:[Offline Message sent at <{timestamp}> received by the server and saved.]"),client_address_port)

                        #change status of client to offline,
                        server_table[client][2]=False
                        #broadcast
                        server_broadcast(server_socket)
     
            else:
                #save message for offline clients
                #message to save
                msg_save = message.split(": ")[1]
                timestamp = datetime.datetime.now()
                formatted_message = f"Group Chat {sender_name}: <{timestamp}> {msg_save}"
                save_message[client].append(formatted_message) 

                #send ACK to sender client
                server_socket.sendto(str.encode(f"[OFFLINE ACK]:>>> [{client} is offline, sending save-message request to server]\n[Offline Message sent at <{timestamp}> received by the server and saved.]"),client_address_port)
                
        broadcast = False
    
    #initial registration of client
    else:
        #make sure that user isn't trying to log in with already connected nickname
        if message not in server_table:
            #represents table with client-name as key
            server_table[message] = [client_ip_address,client_port,True]
            #create entry in save-message table for new client
            save_message[message] = []
            #send ack for client registration
            server_socket.sendto(str.encode("ACK: Registration Successful"),client_address_port)
        else:
            server_socket.sendto(str.encode(">>> [ERROR: User already exists, try another nickname]"),client_address_port)

    #BROADCAST TO THE ALL OF THE CLIENTS, the new updated client table
    if broadcast:
        server_broadcast(server_socket)

#ping client to confirm whether or not it is still active
def send_online_confirmation(receiver, sender_info, server_socket, formatted_message, timestamp):
    receiver_ip = server_table[receiver][0]
    reciever_port = server_table[receiver][1]
     #add message to dict for ack
    message_id = str(uuid.uuid4())
    message_acks[message_id] = False

    #send ONLINE request to questionable receiver
    server_socket.sendto(str.encode(f"[ONLINE CONFIRM]:{message_id}"), (receiver_ip,reciever_port))

    #set timeout
    time.sleep(0.1)

    #if ACK received
    # send sender, err message, and send the updated table to the client
    if message_id not in message_acks:
        server_socket.sendto(str.encode(f"SAVE-MSG-ERROR:{receiver}"),sender_info)
        server_socket.sendto(str.encode(str(server_table)),sender_info)
    #if no ACK received
    #change status of client to offline, broadcast to all active clients, save the message
    else:
        #change status of client to offline,
        server_table[receiver][2]=False
        #broadcast
        server_broadcast(server_socket)
        #save message
        save_message[receiver].append(formatted_message) 
        #send ACK to sender client
        server_socket.sendto(str.encode(f"[OFFLINE ACK]:[Offline Message sent at <{timestamp}> received by the server and saved.]"),sender_info)

#broadcast client table to all active clients
def server_broadcast(server_socket):
    for client in server_table:
        #send to only online clients
        if server_table[client][2] == True:
            broadcast_client_ip = server_table[client][0]
            broadcast_client_port = server_table[client][1]
            server_socket.sendto(str.encode(str(server_table)),(broadcast_client_ip,broadcast_client_port))
    #...
    print("[Client table updated.]")
    print(server_table)

#thread to receive client messages/ACKs
def client_receiver(client_socket, client_name, server_ip, server_port):
    #listen for incoming message
    while(True):
       
        #message from sender
        entire_message = client_socket.recvfrom(65535)
        message = entire_message[0].decode()
        sender_address_port = entire_message[1]

        #create a new thread to handle received message
        handle_message_thread = threading.Thread(target=client_handle_message, args=(client_socket, client_name, server_ip, server_port,message,sender_address_port))
        handle_message_thread.start()

def client_handle_message(client_socket, client_name, server_ip, server_port, message,sender_address_port):
        #get sender ip address and port
        sender_ip_address = sender_address_port[0]
        sender_port = sender_address_port[1]

        #message from the server
        if sender_ip_address==server_ip and sender_port == server_port:
            #IF DEREG ACK from server
            if message.startswith("[DEREG]:"):
                #remove message_id from ack dict
                message_id = message.split(":")[1]
                message_acks.pop(message_id, None)
                print("[You are Offline. Bye.]")
            #IF REG ACK from server
            elif message=="REG: No Offline Messages":
                print("[You have no offline messages]")
            elif message=="REG: Offline Messages":
                print("[You have offline messages:]")
            #OFFLINE-MESSAGE
            elif message.startswith("[OFFLINE]"):
                msg = message.split("[OFFLINE]")[1]
                #check to see if this is a delivery confirmation for a offline message
                if msg.startswith("[OFF]"):
                    print(msg.split("[OFF]")[1])
                else:
                    print(">>> "+msg)
                sender = message.split("[OFFLINE]")[1].split(":")[0]
                #extract original timestamp
                start_index = message.index('<') + 1
                end_index = message.index('>')
                timestamp = message[start_index:end_index]

                #send ACK back to server, confirming they received the offline message
                #[Offline Message sent at <timestamp> received by <receiver nickname>.]
                client_socket.sendto(str.encode(f"[OFFLINE ACK]{sender} {timestamp} {client_name}"),sender_address_port)

            #Confirmation that offline message was received
            elif message.startswith("[OFFLINE CONFIRM]"):
                print(message.split("[OFFLINE CONFIRM]")[1])

            #IF OFFLINE ACK from server
            elif message.startswith("[OFFLINE ACK]:"):
                print(message.split("[OFFLINE ACK]:")[1])

            #receiving GC message
            elif message.startswith("Group Chat "):
                #get message_id from message
                message_id = message.split("Group Chat ")[1]
                message_id = message_id.split(" ")[0]

                #send ACK back to server
                client_socket.sendto(str.encode(f"[GC ACK]{message_id}"), (sender_address_port))

                #remove the message_id from printed message
                message = message.split("Group Chat ")[1]
                message = "Group Chat "+message.split(" ",1)[1]
                #print message
                print(">>> "+message)
                
            #as the sender, ACK for group chat message
            elif message.startswith("[GROUP ACK]"):
                #remove message_id from ack dict
                message_id = message.split("[GROUP ACK]")[1]
                message_acks.pop(message_id, None)
                print("[Group Message received by Server.]")

            #for GC, informing sender that client is not active
            elif message.startswith("[NO ACK]"):
                print(message.split("[NO ACK]")[1])
            
            #Confirmation that we are still active
            elif message.startswith("[ONLINE CONFIRM]:"):
                message_id = message.split("[ONLINE CONFIRM]:")[1]
                #send ACK to server
                client_socket.sendto(str.encode(f"[ONLINE ACK]:{message_id}"), sender_address_port)
            
            #Save Message Request Error, receiver client is active
            elif message.startswith("SAVE-MSG-ERROR:"):
                active_client = message.split("SAVE-MSG-ERROR:")[1]
                print(f"[Client {active_client} exists!!]")

            #else we are receiving updated table
            else:
                #update client_table
                global client_table
                client_table = eval(message)
                print("[Client table updated.]")
                print(client_table)

        #IF ACK For Message Received
        elif message.split("=")[0]=="ACK: Message Received":
            sender_and_id = message.split("=")[1]
            sender = sender_and_id.split(" ")[0]
            #remove message from ack queue
            message_id = sender_and_id.split(" ")[1]
            message_acks.pop(message_id, None)
            print(f"[Message received by {sender}.]")
            
        #else assume it is from client
        #lookup client, print message
        else:
            #find the name of the sender
            sender_nickname = ""
            for client in client_table:
                ip = client_table[client][0]
                port = client_table[client][1]
                if ip==sender_ip_address and port == sender_port:
                    sender_nickname=client
            #extract message_id
            message_id = message.split(":")[0]
            #SEND ACK TO sender!!
            client_socket.sendto(str.encode(f"ACK: Message Received={client_name} {message_id}"),sender_address_port)
            #print out message from other client
            print(">>> "+sender_nickname+": "+message.split(":")[1])

#send message between client-client, have timeout 
def client_sender(message,client_socket,client_name,server_ip,server_port):
    global client_table
    global client_registration_status

    #process send message 
    if message.split(" ")[0]=='send':
        #make sure client is registered/active
        if client_registration_status:
            #make sure correct number of args
            args = message.split(" ")
            if len(args) <3:
                print(">>> [Invalid command, incorrect number of arguments.]")
                return
            #make sure that the receving client exists
            receiver_name = args[1]
            if receiver_name not in client_table:
                print(">>>[Invalid Command, client doesn't exist]")
                return

            #add message_id to ack dict, needs to be ACKed
            message_id = str(uuid.uuid4())
            message_acks[message_id] = False
            message_to_send = message.split(" ",2)[2]
            #check online status of receiver 
            receiver_status = client_table[receiver_name][2]

            #online, try to send message
            if receiver_status:
                receiver_ip = client_table[receiver_name][0]
                receiver_port = client_table[receiver_name][1]
                #send message to specified client
                message_to_send = f"{message_id}:{message_to_send}"
                client_socket.sendto(str.encode(message_to_send),(receiver_ip,receiver_port))
                #wait for ACK, 100 msec
                time.sleep(.1)
                if message_id in message_acks:
                    #send message to server to be saved
                    save_msg = f"SAVE: {receiver_name} {client_name} {datetime.datetime.now()} {message_to_send}"
                    client_socket.sendto(str.encode(save_msg),(server_ip,server_port))
                    #print confirmation of no ACK
                    print(f"[No ACK from {receiver_name}, message sent to server.]")
                

            #offline, send save-message to server
            else:
                print(f">>> [{receiver_name} is offline, sending save-message request to server]")
                save_msg = f"SAVE: {receiver_name} {client_name} {datetime.datetime.now()} {message_to_send}"
                client_socket.sendto(str.encode(save_msg),(server_ip,server_port))
        else:
            print(">>> [Invalid command, not registered]")

    #groupchat
    elif message.split(" ")[0]=="send_all":
       if client_registration_status:
            #check number of args
            args = message.split(" ")
            if len(args) > 1:
                send_group_chat(client_socket,client_name,server_ip,server_port,message)
            else:
                print(">>> [Invalid command, incorrect number of arguments]")
       else:
           print(">>> [Invalid command, not registered]")
    
    #deregistration
    elif message == "dereg":
        if client_registration_status:
            # Create a new thread for sending the deregistration request
            deregistration_thread = threading.Thread(target=send_dereg, args=(client_socket,client_name,server_ip,server_port))
            # Start the thread
            deregistration_thread.start()
        else:
            print(">>> [Invalid command, not registered]")

    #re-register
    elif message == "reg":
        #make sure client isn't alredy registered
        if client_registration_status==False:
            #update registration status
            client_registration_status = True
            #send reg message to server
            client_socket.sendto(str.encode(f"REG:{client_name}"),(server_ip,server_port))
        else:
            print(">>> [Invalid command, client already registered]")

    #invalid command
    else:
        print(">>> [Invalid command]")  
        
#send dereg request to server, confirm ACK
def send_dereg(client_socket, client_name, server_ip, server_port):
    #change registration status of client
    global client_registration_status
    client_registration_status = False
    
    retries = 0
    while retries < 5:
        #add message to dict for ack
        message_id = str(uuid.uuid4())
        message_acks[message_id] = False
        #send dereg message to server
        client_socket.sendto(str.encode(f"DEREG:{client_name} {message_id}"),(server_ip,server_port))

        #wait for 100 msec
        time.sleep(0.1)

        if message_id not in message_acks:
            #acked, break out of loop
            break
        else:
            #no response from the server, retry
            print("Retrying..")
        retries+=1
    if retries == 5:
        print("[Server not responding]")
        print("[Exiting]")
        os._exit(0)    

#send group chat message to server, have a timeout
def send_group_chat(client_socket,client_name,server_ip,server_port, message):
    message_to_send = message.split(" ",1)[1]
    retries = 0
    while retries < 5:
        #add message to dict for ack
        message_id = str(uuid.uuid4())
        message_acks[message_id] = False
        #send group chat message to server
        group_msg = f"GROUP:{message_id} {client_name}: {message_to_send}"
        client_socket.sendto(str.encode(group_msg),(server_ip,server_port))

        #wait for 100 msec
        time.sleep(0.1)

        if message_id not in message_acks:
            #acked, break out of loop
            break
        else:
            #no response from the server, retry
            print("Retrying..")
        retries+=1
    if retries == 5:
        print("[Server not responding]")
        print("[Exiting]")
        os._exit(0)    

def check_port_num(port_num):
        #invalid port #
        try:
            int(port_num)
        except:
             sys.exit(">>> [ERROR: Port number not an integer]")
        if not 1024<=int(port_num)<=65535:
            sys.exit(">>> [ERROR: Port number out of range, needs to be in range 1024-65535]")


def main():

    #ChatApp <mode> <command-line arguments>
    mode = sys.argv[1]

    #server registration, ./ChatApp -s <port>
    if mode == "-s":
        #correct number of args
        if len(sys.argv)!=3:
            sys.exit(">>> [ERROR: Incorrect number of arguments]")

        server_port = sys.argv[2]
        #make sure it's a valid port number
        check_port_num(server_port)
        server_port = int(server_port)

        #bind to 0.0.0.0
        server_ip = '0.0.0.0'

        #create a socket
        server_socket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
        
        #bind to ip address & port
        server_socket.bind((server_ip,server_port))

        #hold info about active/inactive clients
        global server_table

        #save message table, holds offline messages for each client
        global save_message

        #listen for incoming client connections/messages
        try:
            while(True):
                print(">>> ")
                
                #receive message/connection from client
                rec = server_socket.recvfrom(65535)
                message = rec[0].decode()
                client_address_port = rec[1]
                client_ip_address = client_address_port[0]
                client_port = client_address_port[1]

                #start a new thread to handle the received info
                server_receiver_thread = threading.Thread(target=server_receiver, args=(server_socket,message,client_address_port,client_ip_address,client_port))
                server_receiver_thread.start()

        except KeyboardInterrupt:
            print("Stoping Server...")
           
    #client registration
    #$ ChatApp -c <name> <server-ip> <server-port> <client-port>
    if mode== "-c":
        #correct number of args
        if len(sys.argv)!=6:
            sys.exit(">>> [ERROR: Incorrect number of arguments]")
        
        client_name = sys.argv[2]
        server_ip = sys.argv[3]
        server_port = sys.argv[4]
        client_port = sys.argv[5]

        #make sure client port is valid
        check_port_num(client_port)
        client_port = int(client_port)
        #make sure server port is valid
        check_port_num(server_port)
        server_port = int(server_port)
        #make sure server ip address is valid
        try:
            ipaddress.ip_address(server_ip)
        except:
            print(">>>[ERROR: Invalid ip address, needs to be in format of #.#.#.#]")
            sys.exit()

        #get ip address of client machine
        client_ip = socket.gethostbyname(socket.gethostname())

        #create a socket
        client_socket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)

        #bind to ip address & port
        client_socket.bind((client_ip,client_port))

        #initial connection to server 
        client_socket.sendto(str.encode(client_name),(server_ip,server_port))

        #client table
        global client_table

        ##successful registration?
        request = client_socket.recvfrom(65535)
        registration_ack = request[0].decode()
      
        #make sure we receive positive ACK for registration
        if registration_ack == "ACK: Registration Successful":
            print(">>> [Welcome, You are registered.]")
            global client_registration_status
            client_registration_status = True
        elif registration_ack.startswith(">>> [ERROR"):
            print(registration_ack)
            sys.exit()
        

        # receiver thread created for client
        receive_client_thread = threading.Thread(target=client_receiver, args=(client_socket, client_name, server_ip, server_port))
        receive_client_thread.start()

        #send messages
        try:
            while(True):
                try:
                    user_input = input(">>> ")
                    if user_input.strip():  # Check if the user input is not empty
                        send_thread = threading.Thread(target=client_sender, args=(user_input,client_socket,client_name,server_ip,server_port))
                        send_thread.start()
                except KeyboardInterrupt:
                    # Handle Ctrl+C
                    print(">>> Exiting...")
                    os._exit(0)        
                

        except Exception as e:
            # Handle any other exceptions
            print("An error occurred:", str(e))     

#run main
main()

